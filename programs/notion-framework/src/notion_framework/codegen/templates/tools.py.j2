"""Generated CRUD functions for {{ database.title }} database."""

from typing import Any, Dict, List, Optional, Union
from datetime import datetime

from notion_framework.client.client import NotionClient
from notion_framework.types.filters import FilterBuilder
from notion_framework.types.sorts import SortBuilder

from ..types import (
    {{ database.title | normalize_class_name }}ID,
{% for prop_name, prop in database.properties.items() %}
{% if prop.type == 'select' and prop.select_options %}
    {{ database.title | normalize_class_name }}_{{ prop_name | normalize_class_name }},
{% endif %}
{% endfor %}
)


# CRUD Functions for {{ database.title }}

async def create_{{ database.title | normalize_name }}(
    client: NotionClient,
    data: Dict[str, Any]
) -> {{ database.title | normalize_class_name }}ID:
    """Create a new {{ database.title }} entry.
    
    Args:
        client: Notion client instance
        data: Dictionary containing the properties to set
        
    Returns:
        ID of the created page
    """
    properties = {}
    
    # Convert data to Notion format
{% for prop_name, prop in database.properties.items() %}
{% if prop.is_editable %}
    if "{{ prop_name | normalize_name }}" in data:
        value = data["{{ prop_name | normalize_name }}"]
        # Convert based on property type
{% if prop.type == 'title' %}
        if isinstance(value, str):
            properties["{{ prop_name }}"] = {"title": [{"text": {"content": value}}]}
{% elif prop.type == 'rich_text' %}
        if isinstance(value, str):
            properties["{{ prop_name }}"] = {"rich_text": [{"text": {"content": value}}]}
{% elif prop.type == 'select' %}
        if isinstance(value, (str, {{ database.title | normalize_class_name }}_{{ prop_name | normalize_class_name }})):
            properties["{{ prop_name }}"] = {"select": {"name": str(value)}}
{% elif prop.type == 'checkbox' %}
        if isinstance(value, bool):
            properties["{{ prop_name }}"] = {"checkbox": value}
{% elif prop.type == 'number' %}
        if isinstance(value, (int, float)):
            properties["{{ prop_name }}"] = {"number": value}
{% elif prop.type == 'date' %}
        if isinstance(value, str):
            properties["{{ prop_name }}"] = {"date": {"start": value}}
{% elif prop.type == 'relation' %}
        if isinstance(value, list):
            properties["{{ prop_name }}"] = {"relation": [{"id": str(page_id)} for page_id in value]}
{% else %}
        # Generic handling for other types
        properties["{{ prop_name }}"] = {
            "{{ prop.type }}": value
        }
{% endif %}
{% endif %}
{% endfor %}
    
    # Create the page
    response = await client.create_page(
        database_id="{{ database.id }}",
        properties=properties
    )
    
    return {{ database.title | normalize_class_name }}ID(response["id"])


async def read_{{ database.title | normalize_name }}(
    client: NotionClient,
    page_id: {{ database.title | normalize_class_name }}ID
) -> Dict[str, Any]:
    """Read a {{ database.title }} entry by ID.
    
    Args:
        client: Notion client instance
        page_id: ID of the page to read
        
    Returns:
        Dictionary containing the page properties
    """
    response = await client.get_page(str(page_id))
    
    # Extract properties
    data = {}
    properties = response.get("properties", {})
    
{% for prop_name, prop in database.properties.items() %}
    # Extract {{ prop_name }}
    if "{{ prop_name }}" in properties:
        prop_data = properties["{{ prop_name }}"]
{% if prop.type == 'title' %}
        if prop_data.get("title"):
            data["{{ prop_name | normalize_name }}"] = "".join(
                text.get("plain_text", "") for text in prop_data["title"]
            )
{% elif prop.type == 'rich_text' %}
        if prop_data.get("rich_text"):
            data["{{ prop_name | normalize_name }}"] = "".join(
                text.get("plain_text", "") for text in prop_data["rich_text"]
            )
{% elif prop.type == 'select' %}
        if prop_data.get("select"):
            data["{{ prop_name | normalize_name }}"] = {{ database.title | normalize_class_name }}_{{ prop_name | normalize_class_name }}(
                prop_data["select"]["name"]
            )
{% elif prop.type == 'checkbox' %}
        data["{{ prop_name | normalize_name }}"] = prop_data.get("checkbox", False)
{% elif prop.type == 'number' %}
        data["{{ prop_name | normalize_name }}"] = prop_data.get("number")
{% elif prop.type == 'date' %}
        if prop_data.get("date") and prop_data["date"].get("start"):
            data["{{ prop_name | normalize_name }}"] = prop_data["date"]["start"]
{% elif prop.type == 'relation' %}
        if prop_data.get("relation"):
            data["{{ prop_name | normalize_name }}"] = [
                rel["id"] for rel in prop_data["relation"]
            ]
{% else %}
        data["{{ prop_name | normalize_name }}"] = prop_data.get("{{ prop.type }}")
{% endif %}
{% endfor %}
    
    return data


async def update_{{ database.title | normalize_name }}(
    client: NotionClient,
    page_id: {{ database.title | normalize_class_name }}ID,
    data: Dict[str, Any]
) -> {{ database.title | normalize_class_name }}ID:
    """Update a {{ database.title }} entry.
    
    Args:
        client: Notion client instance
        page_id: ID of the page to update
        data: Dictionary containing the properties to update
        
    Returns:
        ID of the updated page
    """
    properties = {}
    
    # Convert data to Notion format (same logic as create)
{% for prop_name, prop in database.properties.items() %}
{% if prop.is_editable %}
    if "{{ prop_name | normalize_name }}" in data:
        value = data["{{ prop_name | normalize_name }}"]
        # Convert based on property type
{% if prop.type == 'title' %}
        if isinstance(value, str):
            properties["{{ prop_name }}"] = {"title": [{"text": {"content": value}}]}
{% elif prop.type == 'rich_text' %}
        if isinstance(value, str):
            properties["{{ prop_name }}"] = {"rich_text": [{"text": {"content": value}}]}
{% elif prop.type == 'select' %}
        if isinstance(value, (str, {{ database.title | normalize_class_name }}_{{ prop_name | normalize_class_name }})):
            properties["{{ prop_name }}"] = {"select": {"name": str(value)}}
{% elif prop.type == 'checkbox' %}
        if isinstance(value, bool):
            properties["{{ prop_name }}"] = {"checkbox": value}
{% elif prop.type == 'number' %}
        if isinstance(value, (int, float)):
            properties["{{ prop_name }}"] = {"number": value}
{% elif prop.type == 'date' %}
        if isinstance(value, str):
            properties["{{ prop_name }}"] = {"date": {"start": value}}
{% elif prop.type == 'relation' %}
        if isinstance(value, list):
            properties["{{ prop_name }}"] = {"relation": [{"id": str(page_id)} for page_id in value]}
{% else %}
        # Generic handling for other types
        properties["{{ prop_name }}"] = {
            "{{ prop.type }}": value
        }
{% endif %}
{% endif %}
{% endfor %}
    
    # Update the page
    await client.update_page(str(page_id), properties=properties)
    
    return page_id


async def delete_{{ database.title | normalize_name }}(
    client: NotionClient,
    page_id: {{ database.title | normalize_class_name }}ID
) -> {{ database.title | normalize_class_name }}ID:
    """Delete (archive) a {{ database.title }} entry.
    
    Args:
        client: Notion client instance
        page_id: ID of the page to delete
        
    Returns:
        ID of the deleted page
    """
    await client.update_page(str(page_id), archived=True)
    return page_id


async def list_{{ database.title | normalize_name }}s(
    client: NotionClient,
    limit: int = 100,
    filter_data: Optional[Dict[str, Any]] = None
) -> List[Dict[str, Any]]:
    """List {{ database.title }} entries.
    
    Args:
        client: Notion client instance
        limit: Maximum number of entries to return
        filter_data: Optional filter criteria
        
    Returns:
        List of dictionaries containing the page properties
    """
    # Build query
    query_data = {
        "page_size": limit
    }
    
    if filter_data:
        query_data["filter"] = filter_data
    
    # Query the database
    response = await client.query_database("{{ database.id }}", **query_data)
    
    # Extract data from each page
    results = []
    for page in response.get("results", []):
        page_data = {"id": {{ database.title | normalize_class_name }}ID(page["id"])}
        properties = page.get("properties", {})
        
{% for prop_name, prop in database.properties.items() %}
        # Extract {{ prop_name }}
        if "{{ prop_name }}" in properties:
            prop_data = properties["{{ prop_name }}"]
{% if prop.type == 'title' %}
            if prop_data.get("title"):
                page_data["{{ prop_name | normalize_name }}"] = "".join(
                    text.get("plain_text", "") for text in prop_data["title"]
                )
{% elif prop.type == 'rich_text' %}
            if prop_data.get("rich_text"):
                page_data["{{ prop_name | normalize_name }}"] = "".join(
                    text.get("plain_text", "") for text in prop_data["rich_text"]
                )
{% elif prop.type == 'select' %}
            if prop_data.get("select"):
                page_data["{{ prop_name | normalize_name }}"] = {{ database.title | normalize_class_name }}_{{ prop_name | normalize_class_name }}(
                    prop_data["select"]["name"]
                )
{% elif prop.type == 'checkbox' %}
            page_data["{{ prop_name | normalize_name }}"] = prop_data.get("checkbox", False)
{% elif prop.type == 'number' %}
            page_data["{{ prop_name | normalize_name }}"] = prop_data.get("number")
{% elif prop.type == 'date' %}
            if prop_data.get("date") and prop_data["date"].get("start"):
                page_data["{{ prop_name | normalize_name }}"] = prop_data["date"]["start"]
{% elif prop.type == 'relation' %}
            if prop_data.get("relation"):
                page_data["{{ prop_name | normalize_name }}"] = [
                    rel["id"] for rel in prop_data["relation"]
                ]
{% else %}
            page_data["{{ prop_name | normalize_name }}"] = prop_data.get("{{ prop.type }}")
{% endif %}
{% endfor %}
        
        results.append(page_data)
    
    return results


# Test Functions

async def test_{{ database.title | normalize_name }}_crud():
    """Test CRUD operations for {{ database.title }}."""
    import os
    from notion_framework.client.client import NotionClient
    
    # Initialize client
    token = os.getenv("NOTION_TOKEN")
    if not token:
        print("❌ NOTION_TOKEN environment variable is required for testing")
        return
    
    client = NotionClient(token)
    
    try:
        print("🧪 Testing {{ database.title }} CRUD operations...")
        
        # Test data
        test_data = {
{% for prop_name, prop in database.properties.items() %}
{% if prop.is_required and prop.is_editable %}
{% if prop.type == 'title' %}
            "{{ prop_name | normalize_name }}": "Test {{ database.title }} Entry",
{% elif prop.type == 'rich_text' %}
            "{{ prop_name | normalize_name }}": "Test description",
{% elif prop.type == 'select' %}
            "{{ prop_name | normalize_name }}": {{ database.title | normalize_class_name }}_{{ prop_name | normalize_class_name }}.{{ prop.select_options[0].name | normalize_enum_value }},
{% elif prop.type == 'checkbox' %}
            "{{ prop_name | normalize_name }}": True,
{% elif prop.type == 'number' %}
            "{{ prop_name | normalize_name }}": 42,
{% elif prop.type == 'date' %}
            "{{ prop_name | normalize_name }}": "2024-01-01",
{% endif %}
{% endif %}
{% endfor %}
        }
        
        # Test CREATE
        print("  ✅ Testing CREATE...")
        page_id = await create_{{ database.title | normalize_name }}(client, test_data)
        print(f"     Created page: {page_id}")
        
        # Test READ
        print("  ✅ Testing READ...")
        data = await read_{{ database.title | normalize_name }}(client, page_id)
        print(f"     Read data: {data}")
        
        # Test UPDATE
        print("  ✅ Testing UPDATE...")
        update_data = {
{% for prop_name, prop in database.properties.items() %}
{% if prop.is_editable and prop.type == 'title' %}
            "{{ prop_name | normalize_name }}": "Updated Test Entry",
{% endif %}
{% endfor %}
        }
        await update_{{ database.title | normalize_name }}(client, page_id, update_data)
        print("     Updated page")
        
        # Test LIST
        print("  ✅ Testing LIST...")
        results = await list_{{ database.title | normalize_name }}s(client, limit=5)
        print(f"     Found {len(results)} entries")
        
        # Test DELETE
        print("  ✅ Testing DELETE...")
        await delete_{{ database.title | normalize_name }}(client, page_id)
        print("     Deleted page")
        
        print("✅ All tests passed!")
        
    except Exception as e:
        print(f"❌ Test failed: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await client.close()


if __name__ == "__main__":
    import asyncio
    asyncio.run(test_{{ database.title | normalize_name }}_crud())